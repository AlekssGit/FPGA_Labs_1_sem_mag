// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/15/2020 14:29:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Lab_4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab_4_vlg_sample_tst(
	A,
	B,
	i_clk,
	sampler_tx
);
input [2:0] A;
input [2:0] B;
input  i_clk;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or i_clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Lab_4_vlg_check_tst (
	led_lib,
	led_rom,
	res_lib,
	res_rom,
	sampler_rx
);
input [6:0] led_lib;
input [6:0] led_rom;
input [2:0] res_lib;
input [2:0] res_rom;
input sampler_rx;

reg [6:0] led_lib_expected;
reg [6:0] led_rom_expected;
reg [2:0] res_lib_expected;
reg [2:0] res_rom_expected;

reg [6:0] led_lib_prev;
reg [6:0] led_rom_prev;
reg [2:0] res_lib_prev;
reg [2:0] res_rom_prev;

reg [6:0] led_lib_expected_prev;
reg [6:0] led_rom_expected_prev;
reg [2:0] res_lib_expected_prev;
reg [2:0] res_rom_expected_prev;

reg [6:0] last_led_lib_exp;
reg [6:0] last_led_rom_exp;
reg [2:0] last_res_lib_exp;
reg [2:0] last_res_rom_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	led_lib_prev = led_lib;
	led_rom_prev = led_rom;
	res_lib_prev = res_lib;
	res_rom_prev = res_rom;
end

// update expected /o prevs

always @(trigger)
begin
	led_lib_expected_prev = led_lib_expected;
	led_rom_expected_prev = led_rom_expected;
	res_lib_expected_prev = res_lib_expected;
	res_rom_expected_prev = res_rom_expected;
end


// expected res_lib[ 2 ]
initial
begin
	res_lib_expected[2] = 1'bX;
	res_lib_expected[2] = #999000 1'b0;
end 
// expected res_lib[ 1 ]
initial
begin
	res_lib_expected[1] = 1'bX;
	res_lib_expected[1] = #999000 1'b0;
end 
// expected res_lib[ 0 ]
initial
begin
	res_lib_expected[0] = 1'bX;
	res_lib_expected[0] = #999000 1'b0;
end 
// expected res_rom[ 2 ]
initial
begin
	res_rom_expected[2] = 1'bX;
	res_rom_expected[2] = #999000 1'b0;
end 
// expected res_rom[ 1 ]
initial
begin
	res_rom_expected[1] = 1'bX;
	res_rom_expected[1] = #999000 1'b0;
end 
// expected res_rom[ 0 ]
initial
begin
	res_rom_expected[0] = 1'bX;
	res_rom_expected[0] = #999000 1'b0;
end 
// expected led_lib[ 6 ]
initial
begin
	led_lib_expected[6] = 1'bX;
end 
// expected led_lib[ 5 ]
initial
begin
	led_lib_expected[5] = 1'bX;
end 
// expected led_lib[ 4 ]
initial
begin
	led_lib_expected[4] = 1'bX;
end 
// expected led_lib[ 3 ]
initial
begin
	led_lib_expected[3] = 1'bX;
end 
// expected led_lib[ 2 ]
initial
begin
	led_lib_expected[2] = 1'bX;
end 
// expected led_lib[ 1 ]
initial
begin
	led_lib_expected[1] = 1'bX;
end 
// expected led_lib[ 0 ]
initial
begin
	led_lib_expected[0] = 1'bX;
end 
// expected led_rom[ 6 ]
initial
begin
	led_rom_expected[6] = 1'bX;
end 
// expected led_rom[ 5 ]
initial
begin
	led_rom_expected[5] = 1'bX;
end 
// expected led_rom[ 4 ]
initial
begin
	led_rom_expected[4] = 1'bX;
end 
// expected led_rom[ 3 ]
initial
begin
	led_rom_expected[3] = 1'bX;
end 
// expected led_rom[ 2 ]
initial
begin
	led_rom_expected[2] = 1'bX;
end 
// expected led_rom[ 1 ]
initial
begin
	led_rom_expected[1] = 1'bX;
end 
// expected led_rom[ 0 ]
initial
begin
	led_rom_expected[0] = 1'bX;
end 
// generate trigger
always @(led_lib_expected or led_lib or led_rom_expected or led_rom or res_lib_expected or res_lib or res_rom_expected or res_rom)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led_lib = %b | expected led_rom = %b | expected res_lib = %b | expected res_rom = %b | ",led_lib_expected_prev,led_rom_expected_prev,res_lib_expected_prev,res_rom_expected_prev);
	$display("| real led_lib = %b | real led_rom = %b | real res_lib = %b | real res_rom = %b | ",led_lib_prev,led_rom_prev,res_lib_prev,res_rom_prev);
`endif
	if (
		( led_lib_expected_prev[0] !== 1'bx ) && ( led_lib_prev[0] !== led_lib_expected_prev[0] )
		&& ((led_lib_expected_prev[0] !== last_led_lib_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_lib[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_lib_expected_prev);
		$display ("     Real value = %b", led_lib_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_lib_exp[0] = led_lib_expected_prev[0];
	end
	if (
		( led_lib_expected_prev[1] !== 1'bx ) && ( led_lib_prev[1] !== led_lib_expected_prev[1] )
		&& ((led_lib_expected_prev[1] !== last_led_lib_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_lib[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_lib_expected_prev);
		$display ("     Real value = %b", led_lib_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_lib_exp[1] = led_lib_expected_prev[1];
	end
	if (
		( led_lib_expected_prev[2] !== 1'bx ) && ( led_lib_prev[2] !== led_lib_expected_prev[2] )
		&& ((led_lib_expected_prev[2] !== last_led_lib_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_lib[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_lib_expected_prev);
		$display ("     Real value = %b", led_lib_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_lib_exp[2] = led_lib_expected_prev[2];
	end
	if (
		( led_lib_expected_prev[3] !== 1'bx ) && ( led_lib_prev[3] !== led_lib_expected_prev[3] )
		&& ((led_lib_expected_prev[3] !== last_led_lib_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_lib[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_lib_expected_prev);
		$display ("     Real value = %b", led_lib_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_lib_exp[3] = led_lib_expected_prev[3];
	end
	if (
		( led_lib_expected_prev[4] !== 1'bx ) && ( led_lib_prev[4] !== led_lib_expected_prev[4] )
		&& ((led_lib_expected_prev[4] !== last_led_lib_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_lib[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_lib_expected_prev);
		$display ("     Real value = %b", led_lib_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_lib_exp[4] = led_lib_expected_prev[4];
	end
	if (
		( led_lib_expected_prev[5] !== 1'bx ) && ( led_lib_prev[5] !== led_lib_expected_prev[5] )
		&& ((led_lib_expected_prev[5] !== last_led_lib_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_lib[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_lib_expected_prev);
		$display ("     Real value = %b", led_lib_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_lib_exp[5] = led_lib_expected_prev[5];
	end
	if (
		( led_lib_expected_prev[6] !== 1'bx ) && ( led_lib_prev[6] !== led_lib_expected_prev[6] )
		&& ((led_lib_expected_prev[6] !== last_led_lib_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_lib[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_lib_expected_prev);
		$display ("     Real value = %b", led_lib_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_lib_exp[6] = led_lib_expected_prev[6];
	end
	if (
		( led_rom_expected_prev[0] !== 1'bx ) && ( led_rom_prev[0] !== led_rom_expected_prev[0] )
		&& ((led_rom_expected_prev[0] !== last_led_rom_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_rom[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_rom_expected_prev);
		$display ("     Real value = %b", led_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_rom_exp[0] = led_rom_expected_prev[0];
	end
	if (
		( led_rom_expected_prev[1] !== 1'bx ) && ( led_rom_prev[1] !== led_rom_expected_prev[1] )
		&& ((led_rom_expected_prev[1] !== last_led_rom_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_rom[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_rom_expected_prev);
		$display ("     Real value = %b", led_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_rom_exp[1] = led_rom_expected_prev[1];
	end
	if (
		( led_rom_expected_prev[2] !== 1'bx ) && ( led_rom_prev[2] !== led_rom_expected_prev[2] )
		&& ((led_rom_expected_prev[2] !== last_led_rom_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_rom[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_rom_expected_prev);
		$display ("     Real value = %b", led_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_rom_exp[2] = led_rom_expected_prev[2];
	end
	if (
		( led_rom_expected_prev[3] !== 1'bx ) && ( led_rom_prev[3] !== led_rom_expected_prev[3] )
		&& ((led_rom_expected_prev[3] !== last_led_rom_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_rom[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_rom_expected_prev);
		$display ("     Real value = %b", led_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_rom_exp[3] = led_rom_expected_prev[3];
	end
	if (
		( led_rom_expected_prev[4] !== 1'bx ) && ( led_rom_prev[4] !== led_rom_expected_prev[4] )
		&& ((led_rom_expected_prev[4] !== last_led_rom_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_rom[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_rom_expected_prev);
		$display ("     Real value = %b", led_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_rom_exp[4] = led_rom_expected_prev[4];
	end
	if (
		( led_rom_expected_prev[5] !== 1'bx ) && ( led_rom_prev[5] !== led_rom_expected_prev[5] )
		&& ((led_rom_expected_prev[5] !== last_led_rom_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_rom[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_rom_expected_prev);
		$display ("     Real value = %b", led_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_rom_exp[5] = led_rom_expected_prev[5];
	end
	if (
		( led_rom_expected_prev[6] !== 1'bx ) && ( led_rom_prev[6] !== led_rom_expected_prev[6] )
		&& ((led_rom_expected_prev[6] !== last_led_rom_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_rom[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_rom_expected_prev);
		$display ("     Real value = %b", led_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_rom_exp[6] = led_rom_expected_prev[6];
	end
	if (
		( res_lib_expected_prev[0] !== 1'bx ) && ( res_lib_prev[0] !== res_lib_expected_prev[0] )
		&& ((res_lib_expected_prev[0] !== last_res_lib_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_lib[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_lib_expected_prev);
		$display ("     Real value = %b", res_lib_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_lib_exp[0] = res_lib_expected_prev[0];
	end
	if (
		( res_lib_expected_prev[1] !== 1'bx ) && ( res_lib_prev[1] !== res_lib_expected_prev[1] )
		&& ((res_lib_expected_prev[1] !== last_res_lib_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_lib[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_lib_expected_prev);
		$display ("     Real value = %b", res_lib_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_lib_exp[1] = res_lib_expected_prev[1];
	end
	if (
		( res_lib_expected_prev[2] !== 1'bx ) && ( res_lib_prev[2] !== res_lib_expected_prev[2] )
		&& ((res_lib_expected_prev[2] !== last_res_lib_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_lib[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_lib_expected_prev);
		$display ("     Real value = %b", res_lib_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res_lib_exp[2] = res_lib_expected_prev[2];
	end
	if (
		( res_rom_expected_prev[0] !== 1'bx ) && ( res_rom_prev[0] !== res_rom_expected_prev[0] )
		&& ((res_rom_expected_prev[0] !== last_res_rom_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_rom[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_rom_expected_prev);
		$display ("     Real value = %b", res_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_res_rom_exp[0] = res_rom_expected_prev[0];
	end
	if (
		( res_rom_expected_prev[1] !== 1'bx ) && ( res_rom_prev[1] !== res_rom_expected_prev[1] )
		&& ((res_rom_expected_prev[1] !== last_res_rom_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_rom[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_rom_expected_prev);
		$display ("     Real value = %b", res_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_res_rom_exp[1] = res_rom_expected_prev[1];
	end
	if (
		( res_rom_expected_prev[2] !== 1'bx ) && ( res_rom_prev[2] !== res_rom_expected_prev[2] )
		&& ((res_rom_expected_prev[2] !== last_res_rom_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res_rom[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res_rom_expected_prev);
		$display ("     Real value = %b", res_rom_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_res_rom_exp[2] = res_rom_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Lab_4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] A;
reg [2:0] B;
reg i_clk;
// wires                                               
wire [6:0] led_lib;
wire [6:0] led_rom;
wire [2:0] res_lib;
wire [2:0] res_rom;

wire sampler;                             

// assign statements (if any)                          
Lab_4 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.i_clk(i_clk),
	.led_lib(led_lib),
	.led_rom(led_rom),
	.res_lib(res_lib),
	.res_rom(res_rom)
);
// A[ 2 ]
initial
begin
	repeat(12)
	begin
		A[2] = 1'b0;
		A[2] = #200000 1'b1;
		# 200000;
	end
	A[2] = 1'b0;
end 
// A[ 1 ]
always
begin
	A[1] = 1'b0;
	A[1] = #100000 1'b1;
	#100000;
end 
// A[ 0 ]
always
begin
	A[0] = 1'b0;
	A[0] = #50000 1'b1;
	#50000;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #1600000 1'b1;
	B[2] = #1600000 1'b0;
	B[2] = #1600000 1'b1;
end 
// B[ 1 ]
initial
begin
	repeat(3)
	begin
		B[1] = 1'b0;
		B[1] = #800000 1'b1;
		# 800000;
	end
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	repeat(6)
	begin
		B[0] = 1'b0;
		B[0] = #400000 1'b1;
		# 400000;
	end
	B[0] = 1'b0;
end 

// i_clk
always
begin
	i_clk = 1'b0;
	i_clk = #10000 1'b1;
	#10000;
end 

Lab_4_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.i_clk(i_clk),
	.sampler_tx(sampler)
);

Lab_4_vlg_check_tst tb_out(
	.led_lib(led_lib),
	.led_rom(led_rom),
	.res_lib(res_lib),
	.res_rom(res_rom),
	.sampler_rx(sampler)
);
endmodule

