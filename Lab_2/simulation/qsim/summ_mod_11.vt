// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/15/2020 09:56:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    summ_mod_11
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module summ_mod_11_vlg_sample_tst(
	i_clk,
	reset,
	sampler_tx
);
input  i_clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(i_clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module summ_mod_11_vlg_check_tst (
	lamp,
	lcd_hi,
	lcd_low,
	out_cnt,
	test_clk,
	sampler_rx
);
input [1:0] lamp;
input [6:0] lcd_hi;
input [6:0] lcd_low;
input [3:0] out_cnt;
input  test_clk;
input sampler_rx;

reg [1:0] lamp_expected;
reg [6:0] lcd_hi_expected;
reg [6:0] lcd_low_expected;
reg [3:0] out_cnt_expected;
reg  test_clk_expected;

reg [1:0] lamp_prev;
reg [6:0] lcd_hi_prev;
reg [6:0] lcd_low_prev;
reg [3:0] out_cnt_prev;
reg  test_clk_prev;

reg [1:0] lamp_expected_prev;
reg [6:0] lcd_hi_expected_prev;
reg [6:0] lcd_low_expected_prev;
reg [3:0] out_cnt_expected_prev;
reg  test_clk_expected_prev;

reg [1:0] last_lamp_exp;
reg [6:0] last_lcd_hi_exp;
reg [6:0] last_lcd_low_exp;
reg [3:0] last_out_cnt_exp;
reg  last_test_clk_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	lamp_prev = lamp;
	lcd_hi_prev = lcd_hi;
	lcd_low_prev = lcd_low;
	out_cnt_prev = out_cnt;
	test_clk_prev = test_clk;
end

// update expected /o prevs

always @(trigger)
begin
	lamp_expected_prev = lamp_expected;
	lcd_hi_expected_prev = lcd_hi_expected;
	lcd_low_expected_prev = lcd_low_expected;
	out_cnt_expected_prev = out_cnt_expected;
	test_clk_expected_prev = test_clk_expected;
end



// expected test_clk
initial
begin
	test_clk_expected = 1'bX;
	test_clk_expected = #999000 1'b0;
end 

// expected lamp[1]
initial
begin
	lamp_expected[1] = 1'bX;
end 

// expected lamp[0]
initial
begin
	lamp_expected[0] = 1'bX;
end 
// expected lcd_hi[ 6 ]
initial
begin
	lcd_hi_expected[6] = 1'bX;
end 
// expected lcd_hi[ 5 ]
initial
begin
	lcd_hi_expected[5] = 1'bX;
end 
// expected lcd_hi[ 4 ]
initial
begin
	lcd_hi_expected[4] = 1'bX;
end 
// expected lcd_hi[ 3 ]
initial
begin
	lcd_hi_expected[3] = 1'bX;
end 
// expected lcd_hi[ 2 ]
initial
begin
	lcd_hi_expected[2] = 1'bX;
end 
// expected lcd_hi[ 1 ]
initial
begin
	lcd_hi_expected[1] = 1'bX;
end 
// expected lcd_hi[ 0 ]
initial
begin
	lcd_hi_expected[0] = 1'bX;
end 
// expected lcd_low[ 6 ]
initial
begin
	lcd_low_expected[6] = 1'bX;
end 
// expected lcd_low[ 5 ]
initial
begin
	lcd_low_expected[5] = 1'bX;
end 
// expected lcd_low[ 4 ]
initial
begin
	lcd_low_expected[4] = 1'bX;
end 
// expected lcd_low[ 3 ]
initial
begin
	lcd_low_expected[3] = 1'bX;
end 
// expected lcd_low[ 2 ]
initial
begin
	lcd_low_expected[2] = 1'bX;
end 
// expected lcd_low[ 1 ]
initial
begin
	lcd_low_expected[1] = 1'bX;
end 
// expected lcd_low[ 0 ]
initial
begin
	lcd_low_expected[0] = 1'bX;
end 
// expected out_cnt[ 3 ]
initial
begin
	out_cnt_expected[3] = 1'bX;
end 
// expected out_cnt[ 2 ]
initial
begin
	out_cnt_expected[2] = 1'bX;
end 
// expected out_cnt[ 1 ]
initial
begin
	out_cnt_expected[1] = 1'bX;
end 
// expected out_cnt[ 0 ]
initial
begin
	out_cnt_expected[0] = 1'bX;
end 
// generate trigger
always @(lamp_expected or lamp or lcd_hi_expected or lcd_hi or lcd_low_expected or lcd_low or out_cnt_expected or out_cnt or test_clk_expected or test_clk)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected lamp = %b | expected lcd_hi = %b | expected lcd_low = %b | expected out_cnt = %b | expected test_clk = %b | ",lamp_expected_prev,lcd_hi_expected_prev,lcd_low_expected_prev,out_cnt_expected_prev,test_clk_expected_prev);
	$display("| real lamp = %b | real lcd_hi = %b | real lcd_low = %b | real out_cnt = %b | real test_clk = %b | ",lamp_prev,lcd_hi_prev,lcd_low_prev,out_cnt_prev,test_clk_prev);
`endif
	if (
		( lamp_expected_prev[0] !== 1'bx ) && ( lamp_prev[0] !== lamp_expected_prev[0] )
		&& ((lamp_expected_prev[0] !== last_lamp_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lamp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lamp_expected_prev);
		$display ("     Real value = %b", lamp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_lamp_exp[0] = lamp_expected_prev[0];
	end
	if (
		( lamp_expected_prev[1] !== 1'bx ) && ( lamp_prev[1] !== lamp_expected_prev[1] )
		&& ((lamp_expected_prev[1] !== last_lamp_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lamp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lamp_expected_prev);
		$display ("     Real value = %b", lamp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_lamp_exp[1] = lamp_expected_prev[1];
	end
	if (
		( lcd_hi_expected_prev[0] !== 1'bx ) && ( lcd_hi_prev[0] !== lcd_hi_expected_prev[0] )
		&& ((lcd_hi_expected_prev[0] !== last_lcd_hi_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_hi[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_hi_expected_prev);
		$display ("     Real value = %b", lcd_hi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lcd_hi_exp[0] = lcd_hi_expected_prev[0];
	end
	if (
		( lcd_hi_expected_prev[1] !== 1'bx ) && ( lcd_hi_prev[1] !== lcd_hi_expected_prev[1] )
		&& ((lcd_hi_expected_prev[1] !== last_lcd_hi_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_hi[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_hi_expected_prev);
		$display ("     Real value = %b", lcd_hi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lcd_hi_exp[1] = lcd_hi_expected_prev[1];
	end
	if (
		( lcd_hi_expected_prev[2] !== 1'bx ) && ( lcd_hi_prev[2] !== lcd_hi_expected_prev[2] )
		&& ((lcd_hi_expected_prev[2] !== last_lcd_hi_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_hi[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_hi_expected_prev);
		$display ("     Real value = %b", lcd_hi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lcd_hi_exp[2] = lcd_hi_expected_prev[2];
	end
	if (
		( lcd_hi_expected_prev[3] !== 1'bx ) && ( lcd_hi_prev[3] !== lcd_hi_expected_prev[3] )
		&& ((lcd_hi_expected_prev[3] !== last_lcd_hi_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_hi[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_hi_expected_prev);
		$display ("     Real value = %b", lcd_hi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lcd_hi_exp[3] = lcd_hi_expected_prev[3];
	end
	if (
		( lcd_hi_expected_prev[4] !== 1'bx ) && ( lcd_hi_prev[4] !== lcd_hi_expected_prev[4] )
		&& ((lcd_hi_expected_prev[4] !== last_lcd_hi_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_hi[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_hi_expected_prev);
		$display ("     Real value = %b", lcd_hi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lcd_hi_exp[4] = lcd_hi_expected_prev[4];
	end
	if (
		( lcd_hi_expected_prev[5] !== 1'bx ) && ( lcd_hi_prev[5] !== lcd_hi_expected_prev[5] )
		&& ((lcd_hi_expected_prev[5] !== last_lcd_hi_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_hi[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_hi_expected_prev);
		$display ("     Real value = %b", lcd_hi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lcd_hi_exp[5] = lcd_hi_expected_prev[5];
	end
	if (
		( lcd_hi_expected_prev[6] !== 1'bx ) && ( lcd_hi_prev[6] !== lcd_hi_expected_prev[6] )
		&& ((lcd_hi_expected_prev[6] !== last_lcd_hi_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_hi[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_hi_expected_prev);
		$display ("     Real value = %b", lcd_hi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lcd_hi_exp[6] = lcd_hi_expected_prev[6];
	end
	if (
		( lcd_low_expected_prev[0] !== 1'bx ) && ( lcd_low_prev[0] !== lcd_low_expected_prev[0] )
		&& ((lcd_low_expected_prev[0] !== last_lcd_low_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_low[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_low_expected_prev);
		$display ("     Real value = %b", lcd_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_low_exp[0] = lcd_low_expected_prev[0];
	end
	if (
		( lcd_low_expected_prev[1] !== 1'bx ) && ( lcd_low_prev[1] !== lcd_low_expected_prev[1] )
		&& ((lcd_low_expected_prev[1] !== last_lcd_low_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_low[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_low_expected_prev);
		$display ("     Real value = %b", lcd_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_low_exp[1] = lcd_low_expected_prev[1];
	end
	if (
		( lcd_low_expected_prev[2] !== 1'bx ) && ( lcd_low_prev[2] !== lcd_low_expected_prev[2] )
		&& ((lcd_low_expected_prev[2] !== last_lcd_low_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_low[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_low_expected_prev);
		$display ("     Real value = %b", lcd_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_low_exp[2] = lcd_low_expected_prev[2];
	end
	if (
		( lcd_low_expected_prev[3] !== 1'bx ) && ( lcd_low_prev[3] !== lcd_low_expected_prev[3] )
		&& ((lcd_low_expected_prev[3] !== last_lcd_low_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_low[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_low_expected_prev);
		$display ("     Real value = %b", lcd_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_low_exp[3] = lcd_low_expected_prev[3];
	end
	if (
		( lcd_low_expected_prev[4] !== 1'bx ) && ( lcd_low_prev[4] !== lcd_low_expected_prev[4] )
		&& ((lcd_low_expected_prev[4] !== last_lcd_low_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_low[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_low_expected_prev);
		$display ("     Real value = %b", lcd_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_low_exp[4] = lcd_low_expected_prev[4];
	end
	if (
		( lcd_low_expected_prev[5] !== 1'bx ) && ( lcd_low_prev[5] !== lcd_low_expected_prev[5] )
		&& ((lcd_low_expected_prev[5] !== last_lcd_low_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_low[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_low_expected_prev);
		$display ("     Real value = %b", lcd_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_low_exp[5] = lcd_low_expected_prev[5];
	end
	if (
		( lcd_low_expected_prev[6] !== 1'bx ) && ( lcd_low_prev[6] !== lcd_low_expected_prev[6] )
		&& ((lcd_low_expected_prev[6] !== last_lcd_low_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_low[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_low_expected_prev);
		$display ("     Real value = %b", lcd_low_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_lcd_low_exp[6] = lcd_low_expected_prev[6];
	end
	if (
		( out_cnt_expected_prev[0] !== 1'bx ) && ( out_cnt_prev[0] !== out_cnt_expected_prev[0] )
		&& ((out_cnt_expected_prev[0] !== last_out_cnt_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_cnt_expected_prev);
		$display ("     Real value = %b", out_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_cnt_exp[0] = out_cnt_expected_prev[0];
	end
	if (
		( out_cnt_expected_prev[1] !== 1'bx ) && ( out_cnt_prev[1] !== out_cnt_expected_prev[1] )
		&& ((out_cnt_expected_prev[1] !== last_out_cnt_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_cnt_expected_prev);
		$display ("     Real value = %b", out_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_cnt_exp[1] = out_cnt_expected_prev[1];
	end
	if (
		( out_cnt_expected_prev[2] !== 1'bx ) && ( out_cnt_prev[2] !== out_cnt_expected_prev[2] )
		&& ((out_cnt_expected_prev[2] !== last_out_cnt_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_cnt_expected_prev);
		$display ("     Real value = %b", out_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_cnt_exp[2] = out_cnt_expected_prev[2];
	end
	if (
		( out_cnt_expected_prev[3] !== 1'bx ) && ( out_cnt_prev[3] !== out_cnt_expected_prev[3] )
		&& ((out_cnt_expected_prev[3] !== last_out_cnt_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_cnt_expected_prev);
		$display ("     Real value = %b", out_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_cnt_exp[3] = out_cnt_expected_prev[3];
	end
	if (
		( test_clk_expected_prev !== 1'bx ) && ( test_clk_prev !== test_clk_expected_prev )
		&& ((test_clk_expected_prev !== last_test_clk_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_clk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_clk_expected_prev);
		$display ("     Real value = %b", test_clk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_test_clk_exp = test_clk_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module summ_mod_11_vlg_vec_tst();
// constants                                           
// general purpose registers
reg i_clk;
reg reset;
// wires                                               
wire [1:0] lamp;
wire [6:0] lcd_hi;
wire [6:0] lcd_low;
wire [3:0] out_cnt;
wire test_clk;

wire sampler;                             

// assign statements (if any)                          
summ_mod_11 i1 (
// port map - connection between master ports and signals/registers   
	.i_clk(i_clk),
	.lamp(lamp),
	.lcd_hi(lcd_hi),
	.lcd_low(lcd_low),
	.out_cnt(out_cnt),
	.reset(reset),
	.test_clk(test_clk)
);

// i_clk
always
begin
	i_clk = 1'b0;
	i_clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #5760000 1'b1;
	reset = #2400000 1'b0;
end 

summ_mod_11_vlg_sample_tst tb_sample (
	.i_clk(i_clk),
	.reset(reset),
	.sampler_tx(sampler)
);

summ_mod_11_vlg_check_tst tb_out(
	.lamp(lamp),
	.lcd_hi(lcd_hi),
	.lcd_low(lcd_low),
	.out_cnt(out_cnt),
	.test_clk(test_clk),
	.sampler_rx(sampler)
);
endmodule

